1.Test Cases for data_type_ops() function:

Public Test Cases:
1. **Test Case 1:**
   - Input: 
     - integer = 10
     - float_num = 20.0
     - string = "Hello"
     - list_input = [1, 2, 3]
     - dictionary = {"key1": "value1"}
     - set_input = {1, 2, 3}
     - v = 5
   - Expected Output: 
     - (15.0, 10.0, "HelloKaushik", [1, 2, 3, 4], {"key1": "value1", "new_key": "new_value"}, {1, 2, 3, 5})

2. Test Case 2:
   - Input:
     - integer = 1
     - float_num = 1.0
     - string = "Test"
     - list_input = []
     - dictionary = {}
     - set_input = set()
     - v = 7
   - Expected Output:
     - (6.0, 0.5, "TestKaushik", [7], {"new_key": "new_value"}, {7})

Private Test Cases:
1.Test Case 1:
   - Input:
     - integer = -5
     - float_num = 10.0
     - string = "Data"
     - list_input = [5, 6]
     - dictionary = {"key2": "value2"}
     - set_input = {8, 9}
     - v = 3
   - Expected Output: 
     - (0.0, 5.0, "DataKaushik", [5, 6, 3], {"key2": "value2", "new_key": "new_value"}, {8, 9, 3})

---

 2. Test Cases for num_processor() function:

Public Test Cases:
1. Test Case 1:
   - Input: [1, 2, 3, 4, 5]
   - Expected Output: 35 (1^2 + 3^2 + 5^2)

2. Test Case 2:
   - Input: [2, 4, 6, 8]
   - Expected Output: 0 (No odd numbers)

3. Test Case 3:
   - Input: [1, 3, 5, 7]
   - Expected Output: 84 (1^2 + 3^2 + 5^2 + 7^2)

4. Test Case 4:
   - Input: []
   - Expected Output: 0 (Empty list)


Private Test Cases:
1. Test Case 1:
   - Input: [10, 15, 20]
   - Expected Output: 225 (15^2)

2. Test Case 2:
   - Input: [0, 0, 0]
   - Expected Output: 0 (All zeros)

---

3. Test Cases for Vowel Counting Program:

Public Test Cases:
1. Test Case 1:
   - Input: "hello world"
   - Expected Output: 3 (e, o, o)

2. Test Case 2:
   - Input: ""
   - Expected Output: 0 (Empty string)

3. Test Case 3:
   - Input: "aeiou"
   - Expected Output: 5 (a, e, i, o, u)

4. Test Case 4:
   - Input: "bcdfg"
   - Expected Output: 0 (No vowels)

Private Test Cases:
1. Test Case 1:
   - Input: "Python"
   - Expected Output: 1 (o)

2. Test Case 2:
   - Input: "Supercalifragilisticexpialidocious"
   - Expected Output: 16 (All vowels in the string)

---

### 4. **Test Cases for Library Class:**

#### Public Test Cases:
1. **Test Case 1:**
   - Action: Add a book "Python Basics" and "Data Science"
   - Expected Output: {"Python Basics": 1, "Data Science": 1}

2. **Test Case 2:**
   - Action: Borrow "Python Basics"
   - Expected Output: {"Python Basics": 0, "Data Science": 1}

3. **Test Case 3:**
   - Action: Try to borrow "Python Basics" again (which is unavailable)
   - Expected Output: "Sorry, 'Python Basics' is not available."

4. **Test Case 4:**
   - Action: Return "Python Basics"
   - Expected Output: {"Python Basics": 1, "Data Science": 1}

#### Private Test Cases:
1. **Test Case 1:**
   - Action: Add "Machine Learning"
   - Expected Output: {"Python Basics": 1, "Data Science": 1, "Machine Learning": 1}

2. **Test Case 2:**
   - Action: Borrow "Data Science"
   - Expected Output: {"Python Basics": 1, "Data Science": 0, "Machine Learning": 1}

3. **Test Case 3:**
   - Action: Return "Machine Learning"
   - Expected Output: {"Python Basics": 1, "Data Science": 0, "Machine Learning": 2}

These test cases cover a variety of possible inputs and scenarios for each function and class.